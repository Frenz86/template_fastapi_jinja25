version: '3.8'
# il file .env viene letto di default dal docker-compose

services:
  # Database PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ${POSTGRES_CONTAINER_NAME:-postgres_db}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      #- ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network

  # Redis per caching
  redis:
    image: redis:7-alpine
    container_name: ${REDIS_CONTAINER_NAME:-redis_cache}
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - app-network

  # pgAdmin per gestione database
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${PGADMIN_CONTAINER_NAME:-pgadmin}
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - app-network

  # FastAPI Application (no image, build container from thid Dockerfile)
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${FASTAPI_CONTAINER_NAME:-fastapi_app}
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379
      ENVIRONMENT: ${ENVIRONMENT}
      PYTHONUNBUFFERED: 1
    volumes:
      - ./app:/app
      - ./templates:/app/templates
      - ./static:/app/static
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Caddy reverse proxy  
  caddy:
    image: caddy:2-alpine
    container_name: ${CADDY_CONTAINER_NAME:-caddy_proxy}
    restart: unless-stopped
    ports:
      - "${CADDY_HTTP_PORT:-80}:80"
      - "${CADDY_HTTPS_PORT:-443}:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./static:/var/www/static
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - fastapi
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  app-network:
    driver: bridge